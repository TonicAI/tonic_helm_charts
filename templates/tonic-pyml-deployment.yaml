{{- /* support values file w/o resource definition */}}
{{- $pyml := .Values.tonicai.pyml_service }}
{{- $resources := coalesce
  $pyml.resources
  (dict "limits" (dict "memory" "8Gi") "requests" (dict "memory" "512Mi" "ephemeral-storage" "1Gi")) -}}
{{- $legacyGpuAmount := (((.Values).resources).pyml_gpu).amount -}}
{{- $newGpuAmount := (get $resources.limits "nvida.com/gpu") }}
{{- $gpuAmount := coalesce $newGpuAmount $legacyGpuAmount 0 -}}
{{- if ($gpuAmount) -}}
{{ $_ := set $resources.limits "nvida.com/gpu" $gpuAmount -}}
{{- end -}}
{{- $tolerations := (coalesce
  ((((.Values).resources).pyml_gpu).tolerations)
  $pyml.tolerations
  list
) -}}
{{- $ports := fromYaml (include "tonic.ports" (list $ (dict "https" 7700 )))  }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tonic-pyml-service
  namespace: {{ .Release.Namespace }}
  annotations:
    {{- include "tonic.annotations" (list $) | nindent 4 }}
  labels:
    {{- include "tonic.allLabels" (list $ (dict "app" "tonic-pyml-service")) | nindent 4 }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: tonic-pyml-service
  strategy:
    type: {{ template "tonic.deployStrategy" . }}
  revisionHistoryLimit: 1
  template:
    metadata:
      annotations:
        {{- include "tonic.annotations" (list $) | nindent 8 }}
      labels:
        {{- include "tonic.allLabels" (list $ (dict "app" "tonic-pyml-service")) | nindent 8 }}
    spec:
      nodeSelector:
        {{- include "tonic.nodeSelectors" (list $) | nindent 8 }}
      tolerations:
        {{- include "tonic.tolerations" (list $ $tolerations) | nindent 8 }}
      securityContext:
        {{- if .Values.useUnprivilegedContainers }}
        seccompProfile:
          type: RuntimeDefault
        runAsNonRoot: true
        {{- end }}
      initContainers:
        {{- include "tonic.initContainers" (list $ $pyml.initContainers) | nindent 8 }}
      containers:
      - securityContext:
          {{- if .Values.useUnprivilegedContainers }}
          allowPrivilegeEscalation: false
          capabilities:
            drop: ["ALL"]
          {{- end }}
          {{- if .Values.readOnlyRootFilesystem }}
          readOnlyRootFilesystem: true
          {{- end }}
        env:
        {{- range $key, $value := $pyml.env }}
        - name: {{ $key }}
          value: {{ $value | quote }}
        {{- end }}
        {{- if $pyml.envRaw }}
        {{- with $pyml.envRaw }}
            {{- toYaml . | nindent 12 }}
        {{- end }}
        {{- end }}
        - name: ENABLE_LOG_COLLECTION
          value: {{quote .Values.enableLogCollection }}
        - name: ENVIRONMENT_NAME
          value: {{ .Values.environmentName }}
        {{- if $pyml.envFrom }}
        envFrom:
        {{- with $pyml.envFrom }}
            {{- toYaml . | nindent 8 }}
        {{- end }}
        {{- end }}
        image: {{ include "tonic.imageWithVersion" (list $ $pyml.image "quay.io/tonicai/tonic_pyml_service" .Values.tonicVersion) }}
        imagePullPolicy: Always
        name: tonic-pyml-service
        volumeMounts:
          {{- if $pyml.volumeMounts }}
          {{- toYaml $pyml.volumeMounts | nindent 8 }}
          {{- end }}
          {{- if .Values.readOnlyRootFilesystem }}
          - name: tmp
            mountPath: /tmp
          - name: var-log-nginx
            mountPath: /var/log/nginx
          - name: var-log-superd
            mountPath: /var/log/supervisor
          - name: var-run-nginx
            mountPath: /var/run/nginx
          - name: var-run-superd
            mountPath: /var/run/supervisor
          - name: var-cache-nginx
            mountPath: /var/cache/nginx
          - name: vector
            mountPath: /tonic/vector_data
          - name: public-log
            mountPath: /publish/logs_public
          - name: log
            mountPath: /publish/logs
          {{- end }}
        ports:
        - containerPort: {{ $ports.https }}
          name: https
        resources:
          {{- toYaml $resources | nindent 10 }}
        startupProbe:
          httpGet:
            path: /health
            port: https
            scheme: HTTPS
          initialDelaySeconds: 5
          periodSeconds: 60
          timeoutSeconds: 30
          failureThreshold: 5
      restartPolicy: Always
      imagePullSecrets:
      - name: tonicai-build-writer-pull-secret
      serviceAccountName: {{ template "tonic.serviceAccountName" . }}
      volumes:
        {{- if $pyml.volumes }}
        {{- toYaml $pyml.volumes | nindent 8 }}
        {{- end }}
        {{- if .Values.readOnlyRootFilesystem }}
        - name: public-log
          emptyDir: {}
        - name: var-run-nginx
          emptyDir: {}
        - name: var-run-superd
          emptyDir: {}
        - name: var-log-nginx
          emptyDir: {}
        - name: var-log-superd
          emptyDir: {}
        - name: vector
          emptyDir: {}
        - name: var-cache-nginx
          emptyDir: {}
        - name: log
          emptyDir: {}
        - name: tmp
          emptyDir: {}
        {{- end }}
